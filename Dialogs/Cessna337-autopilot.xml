<?xml version="1.0"?>
<PropertyList>

<name>autopilot</name>
<layout>vbox</layout>

<group>
	<layout>hbox</layout>
	<empty><stretch>1</stretch></empty>
	<text>
		<label>Navomatic 400A Settings</label>
	</text>
	<empty><stretch>1</stretch></empty>
	<button>
		<pref-width>16</pref-width>
		<pref-height>16</pref-height>
		<legend></legend>
		<default>1</default>
		<keynum>27</keynum>
		<border>2</border>
		<binding>
			<command>dialog-close</command>
		</binding>
		<binding>
			<command>dialog-apply</command>
		</binding>
	</button>
</group>

<hrule/>
    
<nasal>
	<open>
      ## manage one AP property group with checkbox and radio buttons
      #
      Group = {
          new : func(name, options) {
              var m = { parents: [Group] };
              m.name = name;
              m.enabled = 0;
              m.mode = options[0];
              m.options = [];

              var locks = props.globals.getNode("/autopilot/locks", 1);
              if (locks.getNode(name) == nil or locks.getNode(name, 1).getValue() == nil) {
                  locks.getNode(name, 1).setValue("");
              }
              m.lock = locks.getNode(name);
              m.active = dlg.getNode(name ~ "-active", 1);

              foreach (var o; options) {
                  var node = dlg.getNode(o);
                  if (node == nil) {
                      node = dlg.getNode(o, 1);
                      node.setBoolValue(0);
                  }
                  append(m.options, node);
                  if (m.lock.getValue() == o) {
                      m.mode = o;
                  }
              }
              m.listener = setlistener(m.lock, func(n) { m.update(n.getValue()) }, 1);
              return m;
          },
          del : func {
              removelistener(me.listener);
          },

          ## handle checkbox
          #
          enable : func {
              me.enabled = me.active.getBoolValue();
              me.lock.setValue(me.enabled ? me.mode : "");
          },

          ## handle radiobuttons
          #
          set : func(mode) {
              me.mode = mode;
              foreach (var o; me.options) {
                  o.setBoolValue(o.getName() == mode);
              }
              if (me.enabled) {
                  me.lock.setValue(mode);
              }
          },

          ## update checkboxes/radiobuttons state from the AP (listener callback)
          #
          update : func(mode) {
              me.enabled = (mode != "");
              me.active.setBoolValue(me.enabled);
              if (mode == "") {
                  mode = me.mode;
              }
              foreach (var o; me.options) {
                  o.setBoolValue(o.getName() == mode);
              }
          },
      };


      ## create and initialize input field properties if necessary
      #
      var apset = props.globals.getNode("/autopilot/settings", 1);
      foreach (var p; ["heading-bug-deg", "target-pitch-deg"]) {
          if ((var n = apset.getNode(p)) == nil or n.getType() == "NONE") {
              apset.getNode(p, 1).setDoubleValue(0);
          }
      }

      var dlg = props.globals.getNode("/sim/gui/dialogs/autopilot", 1);

      # - first entry ("heading" etc.) is the target property in /autopilot/locks/ *and*
      #   the checkbox state property name (with "-active" appended);
      # - second entry is a list of available options for the /autopilot/locks/* property
      #   and used as radio button state property; the first list entry is used as default
      #
      var hdg = Group.new("heading",  ["wing-leveler", "dg-heading-hold"]);
      var alt = Group.new("altitude", ["pitch-hold"]);
	</open>
	<close>
		hdg.del();
		alt.del();
	</close>
</nasal>

<group>
	<layout>vbox</layout>
	<default-padding>8</default-padding>
	<!-- Heading -->
	<group>
		<layout>hbox</layout>
		<checkbox>
			<label>Heading Control ON</label>
			<halign>fill</halign>
			<property>/sim/gui/dialogs/autopilot/heading-active</property>
			<live>true</live>
			<binding>
				<command>dialog-apply</command>
			</binding>
			<binding>
				<command>nasal</command>
				<script>hdg.enable()</script>
			</binding>
		</checkbox>
	</group>
	<group>
		<layout>table</layout>
		<radio>
			<row>1</row>
			<col>0</col>
			<property>/sim/gui/dialogs/autopilot/wing-leveler</property>
			<live>true</live>
			<binding>
				<command>nasal</command>
				<script>hdg.set("wing-leveler")</script>
			</binding>
		</radio>
		<text>
			<label>Wings leveler</label>
			<halign>right</halign>
			<row>1</row>
			<col>1</col>
		</text>
		<radio>
			<row>2</row>
			<col>0</col>
			<property>/sim/gui/dialogs/autopilot/dg-heading-hold</property>
			<live>true</live>
			<binding>
				<command>nasal</command>
				<script>hdg.set("dg-heading-hold")</script>
			</binding>
		</radio>
		<text>
			<label>Heading Bug</label>
			<halign>right</halign>
			<row>2</row>
			<col>1</col>
		</text>
		<input>
			<row>2</row>
			<col>2</col>
			<property>/autopilot/settings/heading-bug-deg</property>
			<live>true</live>
			<binding>
				<command>dialog-apply</command>
			</binding>
		</input>
	</group>
</group>

	<hrule/>

<group>
	<!-- Pitch/Altitude -->
	<layout>vbox</layout>
	<default-padding>8</default-padding>
	<group>
		<layout>hbox</layout>
		<checkbox>
			<label>Pitch (altitude) Control ON</label>
			<halign>fill</halign>
			<property>/sim/gui/dialogs/autopilot/altitude-active</property>
			<live>true</live>
			<binding>
				<command>dialog-apply</command>
			</binding>
			<binding>
				<command>nasal</command>
				<script>alt.enable()</script>
			</binding>
		</checkbox>
	</group>
	<group>
		<layout>table</layout>
		<text>
			<label>Pitch</label>
			<halign>right</halign>
			<row>0</row>
			<col>0</col>
		</text>
		<input>
			<row>0</row>
			<col>2</col>
			<property>/autopilot/settings/target-pitch-deg</property>
			<live>true</live>
			<binding>
				<command>dialog-apply</command>
			</binding>
		</input>
	</group>
</group>
 
</PropertyList>